jobs:

- job: 'AddressSanitizer'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script: |
      git clone https://github.com/ariya/compression-corpus.git
      cd compression-corpus
      cd enwik
      unzip enwik8.zip
    displayName: 'Retrieve test compression corpus'
  - script: sudo apt install -y make gcc
    displayName: 'Install requirements'
  - script: gcc --version
    displayName: 'Verify tools version'
  - script: CC=gcc CFLAGS="-g -fno-omit-frame-pointer -fsanitize=address -DFASTLZ_USE_SAFE_DECOMPRESSOR=0" make roundtrip
    workingDirectory: tests
    displayName: 'Perform round-trip tests with unsafe decompressor'
  - script: CC=gcc CFLAGS="-g -fno-omit-frame-pointer -fsanitize=address" make roundtrip
    workingDirectory: tests
    displayName: 'Perform round-trip tests'
  - script: CC=gcc CFLAGS="-g -fno-omit-frame-pointer -fsanitize=address -DFASTLZ_USE_MEMMOVE=0" make roundtrip
    workingDirectory: tests
    displayName: 'Perform round-trip tests with disabling memmove'

- job: 'CodeQuality'
  pool:
    vmImage: 'macOS-latest'
  steps:
  - script: brew install clang-format && clang-format --version
    displayName: 'Install clang-format'
  - script: clang-format -i --style=google *.h *.c tests/*.c examples/*.c
    displayName: 'Run code formatter'
  - script: git diff --quiet HEAD
    displayName: 'Check if the styling guide is followed'

- job: 'amd64_linux_clang'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script: |
      git clone https://github.com/ariya/compression-corpus.git
      cd compression-corpus
      cd enwik
      unzip enwik8.zip
    displayName: 'Retrieve test compression corpus'
  - script: sudo apt install -y make clang
    displayName: 'Install requirements'
  - script: clang --version
    displayName: 'Verify tools version'
  - script: CC=clang make roundtrip
    workingDirectory: tests
    displayName: 'Perform round-trip tests'
  - script: CC=clang make
    workingDirectory: examples
    displayName: 'Build examples: 6pack and 6unpack'
  - script: |
      ./6pack -v
      ./6pack ../compression-corpus/enwik/enwik8.txt archive.6pk
      ./6unpack -v
      ./6unpack archive.6pk
    workingDirectory: examples
    displayName: 'Run examples: 6pack and 6unpack'

- job: 'amd64_linux_gcc'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script: |
      git clone https://github.com/ariya/compression-corpus.git
      cd compression-corpus
      cd enwik
      unzip enwik8.zip
    displayName: 'Retrieve test compression corpus'
  - script: sudo apt install -y make gcc
    displayName: 'Install requirements'
  - script: gcc --version
    displayName: 'Verify tools version'
  - script: CC=gcc make roundtrip
    workingDirectory: tests
    displayName: 'Perform round-trip tests'
  - script: CC=gcc make
    workingDirectory: examples
    displayName: 'Build examples: 6pack and 6unpack'
  - script: |
      ./6pack -v
      ./6pack ../compression-corpus/enwik/enwik8.txt archive.6pk
      ./6unpack -v
      ./6unpack archive.6pk
    workingDirectory: examples
    displayName: 'Run examples: 6pack and 6unpack'

- job: 'amd64_linux_tcc'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script: |
      git clone https://github.com/ariya/compression-corpus.git
      cd compression-corpus
      cd enwik
      unzip enwik8.zip
    displayName: 'Retrieve test compression corpus'
  - script: sudo apt install -y make tcc
    displayName: 'Install requirements'
  - script: tcc -v
    displayName: 'Verify tools version'
  - script: CC=tcc make roundtrip
    workingDirectory: tests
    displayName: 'Perform round-trip tests'

- job: 'amd64_macos_clang'
  pool:
    vmImage: 'macOS-latest'
  steps:
  - script: |
      git clone https://github.com/ariya/compression-corpus.git
      cd compression-corpus
      cd enwik
      unzip enwik8.zip
    displayName: 'Retrieve test compression corpus'
  - script: cc --version
    displayName: 'Verify tools version'
  - script: make roundtrip
    workingDirectory: tests
    displayName: 'Perform round-trip tests'
  - script: make
    workingDirectory: examples
    displayName: 'Build examples: 6pack and 6unpack'
  - script: |
      ./6pack -v
      ./6pack ../compression-corpus/enwik/enwik8.txt archive.6pk
      ./6unpack -v
      ./6unpack archive.6pk
    workingDirectory: examples
    displayName: 'Run examples: 6pack and 6unpack'

- job: 'amd64_macos_gcc'
  pool:
    vmImage: 'macOS-latest'
  steps:
  - script: |
      git clone https://github.com/ariya/compression-corpus.git
      cd compression-corpus
      cd enwik
      unzip enwik8.zip
    displayName: 'Retrieve test compression corpus'
  - script: brew install gcc@9
    displayName: 'Install requirements'
  - script: gcc-9 --version
    displayName: 'Verify tools version'
  - script: CC=gcc-9 make roundtrip
    workingDirectory: tests
    displayName: 'Perform round-trip tests'
  - script: CC=gcc-9 make
    workingDirectory: examples
    displayName: 'Build examples: 6pack and 6unpack'
  - script: |
      ./6pack -v
      ./6pack ../compression-corpus/enwik/enwik8.txt archive.6pk
      ./6unpack -v
      ./6unpack archive.6pk
    workingDirectory: examples
    displayName: 'Run examples: 6pack and 6unpack'

- job: 'amd64_windows_gcc'
  pool:
    vmImage: 'vs2017-win2016'
  variables:
    CC: 'gcc'
  steps:
  - script: |
      git clone https://github.com/ariya/compression-corpus.git
      cd compression-corpus
      cd enwik
      unzip enwik8.zip
    displayName: 'Retrieve test compression corpus'
  - script: choco install mingw --version 8.1.0
    displayName: 'install MinGW-w64'
  - script: gcc --version
    displayName: 'Verify tools version'
  - script: make roundtrip
    workingDirectory: tests
    displayName: 'Perform round-trip tests'
  - script: make
    workingDirectory: examples
    displayName: 'Build examples: 6pack and 6unpack'
  - script: |
      .6pack -v
      6pack ../compression-corpus/enwik/enwik8.txt archive.6pk
      6unpack -v
      6unpack archive.6pk
    workingDirectory: examples
    displayName: 'Run examples: 6pack and 6unpack'

- job: 'amd64_windows_vs2017'
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - script: |
      git clone https://github.com/ariya/compression-corpus.git
      cd compression-corpus
      cd enwik
      unzip enwik8.zip
    displayName: 'Retrieve test compression corpus'
  - task: BatchScript@1
    inputs:
      filename: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\Tools\\VsDevCmd.bat"
      arguments: -no_logo
      modifyEnvironment: true
    displayName: Setup environment for Visual Studio"
  - script: cl.exe
    displayName: 'Verify tools version'
  - script: make -f Makefile.win roundtrip
    workingDirectory: tests
    displayName: 'Perform round-trip tests'
  - script: make -f Makefile.win
    workingDirectory: examples
    displayName: 'Build examples: 6pack and 6unpack'
  - script: |
      6pack -v
      6pack ..\compression-corpus\silesia/webster archive.6pk
      6unpack -v
      6unpack archive.6pk
    workingDirectory: examples
    displayName: 'Run examples: 6pack and 6unpack'

- job: 'amd64_windows_vs2019'
  pool:
    vmImage: 'windows-2019'
  steps:
  - script: |
      git clone https://github.com/ariya/compression-corpus.git
      cd compression-corpus
      cd enwik
      unzip enwik8.zip
    displayName: 'Retrieve test compression corpus'
  - task: BatchScript@1
    inputs:
      filename: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\Common7\\Tools\\VsDevCmd.bat"
      arguments: -no_logo
      modifyEnvironment: true
    displayName: Setup environment for Visual Studio"
  - script: cl.exe
    displayName: 'Verify tools version'
  - script: make -f Makefile.win roundtrip
    workingDirectory: tests
    displayName: 'Perform round-trip tests'
  - script: make -f Makefile.win
    workingDirectory: examples
    displayName: 'Build examples: 6pack and 6unpack'
  - script: |
      6pack -v
      6pack ..\compression-corpus\silesia/webster archive.6pk
      6unpack -v
      6unpack archive.6pk
    workingDirectory: examples
    displayName: 'Run examples: 6pack and 6unpack'

- job: 'arm64_linux_gcc'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script: |
      git clone https://github.com/ariya/compression-corpus.git
      cd compression-corpus
      cd enwik
      unzip enwik8.zip
    displayName: 'Retrieve test compression corpus'
  - script: sudo apt install -y qemu-user
    displayName: 'Install requirements'
  - script: |
      git clone --depth 1 https://github.com/dockcross/dockcross.git && cd dockcross
      docker run --rm dockcross/linux-arm64 > ./dockcross-linux-arm64
      chmod +x ./dockcross-linux-arm64
    displayName: 'Prepare Dockcross'
  - script: ./dockcross/dockcross-linux-arm64 bash -c '$CC --version'
    displayName: 'Verify tools version'
  - script: |
      ./dockcross/dockcross-linux-arm64 bash -c 'cd tests && $CC -o test_roundtrip -Wall -std=c90 -static  -I.. test_roundtrip.c ../fastlz.c'
      cd tests
      file ./test_roundtrip
      qemu-aarch64 ./test_roundtrip
    displayName: 'Perform round-trip tests'
  - script: |
      ./dockcross/dockcross-linux-arm64 bash -c 'cd examples && $CC -o 6pack -Wall -std=c90 -static  -I.. 6pack.c ../fastlz.c'
      ./dockcross/dockcross-linux-arm64 bash -c 'cd examples && $CC -o 6unpack -Wall -std=c90 -static  -I.. 6unpack.c ../fastlz.c'
      cd examples
      qemu-aarch64 ./6pack -v
      qemu-aarch64 ./6pack ../compression-corpus/enwik/enwik8.txt archive.6pk
      qemu-aarch64 ./6unpack -v
      qemu-aarch64 ./6unpack archive.6pk
    displayName: 'Build and run examples: 6pack and 6unpack'

- job: 'armhf_linux_gcc'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script: |
      git clone https://github.com/ariya/compression-corpus.git
      cd compression-corpus
      cd enwik
      unzip enwik8.zip
    displayName: 'Retrieve test compression corpus'
  - script: sudo apt install -y qemu-user
    displayName: 'Install requirements'
  - script: |
      git clone --depth 1 https://github.com/dockcross/dockcross.git && cd dockcross
      docker run --rm dockcross/linux-armv7 > ./dockcross-linux-armv7
      chmod +x ./dockcross-linux-armv7
    displayName: 'Prepare Dockcross'
  - script: ./dockcross/dockcross-linux-armv7 bash -c '$CC --version'
    displayName: 'Verify tools version'
  - script: |
      ./dockcross/dockcross-linux-armv7 bash -c 'cd tests && $CC -o test_roundtrip -Wall -std=c90 -static  -I.. test_roundtrip.c ../fastlz.c'
      cd tests
      file ./test_roundtrip
      qemu-arm ./test_roundtrip
    displayName: 'Perform round-trip tests'
  - script: |
      ./dockcross/dockcross-linux-armv7 bash -c 'cd examples && $CC -o 6pack -Wall -std=c90 -static  -I.. 6pack.c ../fastlz.c'
      ./dockcross/dockcross-linux-armv7 bash -c 'cd examples && $CC -o 6unpack -Wall -std=c90 -static  -I.. 6unpack.c ../fastlz.c'
      cd examples
      qemu-arm ./6pack -v
      qemu-arm ./6pack ../compression-corpus/enwik/enwik8.txt archive.6pk
      qemu-arm ./6unpack -v
      qemu-arm ./6unpack archive.6pk
    displayName: 'Build and run examples: 6pack and 6unpack'

- job: 'i686_linux_clang'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script: |
      git clone https://github.com/ariya/compression-corpus.git
      cd compression-corpus
      cd enwik
      unzip enwik8.zip
    displayName: 'Retrieve test compression corpus'
  - script: sudo apt install -y qemu-user
    displayName: 'Install requirements'
  - script: |
      git clone --depth 1 https://github.com/dockcross/dockcross.git && cd dockcross
      docker run --rm dockcross/linux-x86 > ./dockcross-linux-x86
      chmod +x ./dockcross-linux-x86
    displayName: 'Prepare Dockcross'
  - script: ./dockcross/dockcross-linux-x86 bash -c "sudo apt install -y clang && clang -v"
    displayName: 'Check tools versions'
  - script: |
      ./dockcross/dockcross-linux-x86 bash -c 'sudo apt install -y clang && cd tests && clang -o test_roundtrip -Wall -m32 -std=c90 -static  -I.. test_roundtrip.c ../fastlz.c'
      cd tests
      file ./test_roundtrip
      qemu-i386 ./test_roundtrip
    displayName: 'Perform round-trip tests'
  - script: |
      ./dockcross/dockcross-linux-x86 bash -c 'sudo apt install -y clang && cd examples && clang -o 6pack -Wall -m32 -std=c90 -static  -I.. 6pack.c ../fastlz.c'
      ./dockcross/dockcross-linux-x86 bash -c 'sudo apt install -y clang && cd examples && clang -o 6unpack -Wall -m32 -std=c90 -static  -I.. 6unpack.c ../fastlz.c'
      cd examples
      qemu-i386 ./6pack -v
      qemu-i386 ./6pack ../compression-corpus/enwik/enwik8.txt archive.6pk
      qemu-i386 ./6unpack -v
      qemu-i386 ./6unpack archive.6pk
    displayName: 'Build and run examples: 6pack and 6unpack'

- job: 'i686_linux_gcc'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script: |
      git clone https://github.com/ariya/compression-corpus.git
      cd compression-corpus
      cd enwik
      unzip enwik8.zip
    displayName: 'Retrieve test compression corpus'
  - script: sudo apt install -y qemu-user
    displayName: 'Install requirements'
  - script: |
      git clone --depth 1 https://github.com/dockcross/dockcross.git && cd dockcross
      docker run --rm dockcross/linux-x86 > ./dockcross-linux-x86
      chmod +x ./dockcross-linux-x86
    displayName: 'Prepare Dockcross'
  - script: ./dockcross/dockcross-linux-x86 bash -c '$CC --version'
    displayName: 'Verify tools version'
  - script: |
      ./dockcross/dockcross-linux-x86 bash -c 'cd tests && $CC -o test_roundtrip -Wall -std=c90 -static  -I.. test_roundtrip.c ../fastlz.c'
      cd tests
      file ./test_roundtrip
      qemu-i386 ./test_roundtrip
    displayName: 'Perform round-trip tests'
  - script: |
      ./dockcross/dockcross-linux-x86 bash -c 'cd examples && $CC -o 6pack -Wall -std=c90 -static  -I.. 6pack.c ../fastlz.c'
      ./dockcross/dockcross-linux-x86 bash -c 'cd examples && $CC -o 6unpack -Wall -std=c90 -static  -I.. 6unpack.c ../fastlz.c'
      cd examples
      qemu-i386 ./6pack -v
      qemu-i386 ./6pack ../compression-corpus/enwik/enwik8.txt archive.6pk
      qemu-i386 ./6unpack -v
      qemu-i386 ./6unpack archive.6pk
    displayName: 'Build and run examples: 6pack and 6unpack'

- job: 'i686_macos_clang'
  condition: eq(1, 2)
  pool:
    vmImage: 'macOS-latest'
  steps:
  - script: |
      git clone https://github.com/ariya/compression-corpus.git
      cd compression-corpus
      cd enwik
      unzip enwik8.zip
    displayName: 'Retrieve test compression corpus'
  - script: cc --version
    displayName: 'Verify tools version'
  - script: make roundtrip CFLAGS='-m32' LDFLAGS='-m32'
    workingDirectory: tests
    displayName: 'Perform round-trip tests'
  - script: file tests/test_roundtrip
    displayName: 'file tests/test_roundtrip'
  - script: make CFLAGS='-m32' LDFLAGS='-m32'
    workingDirectory: examples
    displayName: 'Build examples: 6pack and 6unpack'
  - script: |
      file ./6pack
      ./6pack -v
      ./6pack ../compression-corpus/enwik/enwik8.txt archive.6pk
      file ./6unpack
      ./6unpack -v
      ./6unpack archive.6pk
    workingDirectory: examples
    displayName: 'Run examples: 6pack and 6unpack'

- job: 'i686_macos_gcc'
  condition: eq(1, 2)
  pool:
    vmImage: 'macOS-latest'
  steps:
  - script: |
      git clone https://github.com/ariya/compression-corpus.git
      cd compression-corpus
      cd enwik
      unzip enwik8.zip
    displayName: 'Retrieve test compression corpus'
  - script: brew install gcc@9
    displayName: 'Install requirements'
  - script: gcc-9 --version
    displayName: 'Verify tools version'
  - script: CC=gcc-9 make roundtrip CFLAGS='-m32' LDFLAGS='-m32'
    workingDirectory: tests
    displayName: 'Perform round-trip tests'
  - script: file tests/test_roundtrip
    displayName: 'file tests/test_roundtrip'
  - script: CC=gcc-9 make CFLAGS='-m32' LDFLAGS='-m32'
    workingDirectory: examples
    displayName: 'Build examples: 6pack and 6unpack'
  - script: |
      file ./6pack
      ./6pack -v
      ./6pack ../compression-corpus/enwik/enwik8.txt archive.6pk
      file ./6unpack
      ./6unpack -v
      ./6unpack archive.6pk
    workingDirectory: examples
    displayName: 'Run examples: 6pack and 6unpack'

- job: 'mips_linux_gcc'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script: |
      git clone https://github.com/ariya/compression-corpus.git
      cd compression-corpus
      cd enwik
      unzip enwik8.zip
    displayName: 'Retrieve test compression corpus'
  - script: sudo apt install -y qemu-user
    displayName: 'Install requirements'
  - script: |
      git clone --depth 1 https://github.com/dockcross/dockcross.git && cd dockcross
      docker run --rm dockcross/linux-mips > ./dockcross-linux-mips
      chmod +x ./dockcross-linux-mips
    displayName: 'Prepare Dockcross'
  - script: ./dockcross/dockcross-linux-mips bash -c '$CC --version'
    displayName: 'Verify tools version'
  - script: |
      ./dockcross/dockcross-linux-mips bash -c 'cd tests && $CC -o test_roundtrip -Wall -std=c90 -static  -I.. test_roundtrip.c ../fastlz.c'
      cd tests
      file ./test_roundtrip
      qemu-mips ./test_roundtrip
    displayName: 'Perform round-trip tests'
  - script: |
      ./dockcross/dockcross-linux-mips bash -c 'cd examples && $CC -o 6pack -Wall -std=c90 -static  -I.. 6pack.c ../fastlz.c'
      ./dockcross/dockcross-linux-mips bash -c 'cd examples && $CC -o 6unpack -Wall -std=c90 -static  -I.. 6unpack.c ../fastlz.c'
      cd examples
      qemu-mips ./6pack -v
      qemu-mips ./6pack ../compression-corpus/enwik/enwik8.txt archive.6pk
      qemu-mips ./6unpack -v
      qemu-mips ./6unpack archive.6pk
    displayName: 'Build and run examples: 6pack and 6unpack'
